// Code generated by protoc-gen-go. DO NOT EDIT.
// source: directorycontents/directorycontents.proto

/*
Package directorycontents is a generated protocol buffer package.

It is generated from these files:
	directorycontents/directorycontents.proto

It has these top-level messages:
	Path
	File
*/
package directorycontents

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// tag::path[]
type Path struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Path) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// tag::file[]
type File struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size    int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Mode    string `protobuf:"bytes,3,opt,name=mode" json:"mode,omitempty"`
	Modtime string `protobuf:"bytes,4,opt,name=modtime" json:"modtime,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *File) GetModtime() string {
	if m != nil {
		return m.Modtime
	}
	return ""
}

func init() {
	proto.RegisterType((*Path)(nil), "directorycontents.Path")
	proto.RegisterType((*File)(nil), "directorycontents.File")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Lister service

type ListerClient interface {
	LS(ctx context.Context, in *Path, opts ...grpc.CallOption) (Lister_LSClient, error)
}

type listerClient struct {
	cc *grpc.ClientConn
}

func NewListerClient(cc *grpc.ClientConn) ListerClient {
	return &listerClient{cc}
}

func (c *listerClient) LS(ctx context.Context, in *Path, opts ...grpc.CallOption) (Lister_LSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Lister_serviceDesc.Streams[0], c.cc, "/directorycontents.Lister/LS", opts...)
	if err != nil {
		return nil, err
	}
	x := &listerLSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lister_LSClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type listerLSClient struct {
	grpc.ClientStream
}

func (x *listerLSClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Lister service

type ListerServer interface {
	LS(*Path, Lister_LSServer) error
}

func RegisterListerServer(s *grpc.Server, srv ListerServer) {
	s.RegisterService(&_Lister_serviceDesc, srv)
}

func _Lister_LS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Path)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ListerServer).LS(m, &listerLSServer{stream})
}

type Lister_LSServer interface {
	Send(*File) error
	grpc.ServerStream
}

type listerLSServer struct {
	grpc.ServerStream
}

func (x *listerLSServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

var _Lister_serviceDesc = grpc.ServiceDesc{
	ServiceName: "directorycontents.Lister",
	HandlerType: (*ListerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LS",
			Handler:       _Lister_LS_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "directorycontents/directorycontents.proto",
}

func init() { proto.RegisterFile("directorycontents/directorycontents.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4c, 0xc9, 0x2c, 0x4a,
	0x4d, 0x2e, 0xc9, 0x2f, 0xaa, 0x4c, 0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b, 0x29, 0xd6, 0xc7, 0x10,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc4, 0x90, 0x50, 0x92, 0xe2, 0x62, 0x09, 0x48,
	0x2c, 0xc9, 0x10, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0xb3, 0x95, 0x62, 0xb8, 0x58, 0xdc, 0x32, 0x73, 0x52, 0xb1, 0xc9, 0x81, 0xc4, 0x8a,
	0x33, 0xab, 0x52, 0x25, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0xc0, 0x6c, 0x90, 0x58, 0x6e, 0x7e,
	0x4a, 0xaa, 0x04, 0x33, 0x44, 0x1d, 0x88, 0x2d, 0x24, 0xc1, 0xc5, 0x9e, 0x9b, 0x9f, 0x52, 0x92,
	0x99, 0x9b, 0x2a, 0xc1, 0x02, 0x16, 0x86, 0x71, 0x8d, 0x5c, 0xb8, 0xd8, 0x7c, 0x32, 0x8b, 0x4b,
	0x52, 0x8b, 0x84, 0xac, 0xb8, 0x98, 0x7c, 0x82, 0x85, 0xc4, 0xf5, 0x30, 0x9d, 0x0d, 0x72, 0x9a,
	0x14, 0x36, 0x09, 0x90, 0xbb, 0x94, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x3e, 0x33, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x80, 0xbe, 0x49, 0xec, 0x06, 0x01, 0x00, 0x00,
}
